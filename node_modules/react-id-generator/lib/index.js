'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));

var globalPrefix = "id";
var lastId = 0;
function nextId(localPrefix) {
  lastId++;
  return "".concat(localPrefix || globalPrefix).concat(lastId);
}
var resetId = function resetId() {
  lastId = 0;
};
var setPrefix = function setPrefix(newPrefix) {
  globalPrefix = newPrefix;
};

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var getIds = function getIds(count, prefix) {
  var ids = [];

  for (var i = 0; i < count; i++) {
    ids.push(nextId(prefix));
  }

  return ids;
};

function useDidUpdate() {
  var isUpdate = React.useRef(false);
  React.useEffect(function () {
    isUpdate.current = true;
  }, []);
  return isUpdate.current;
}

function useId() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var prefix = arguments.length > 1 ? arguments[1] : undefined;
  var dependencies = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var _React$useState = React.useState(function () {
    return getIds(count, prefix);
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      idsList = _React$useState2[0],
      setIdsList = _React$useState2[1];

  var isUpdate = useDidUpdate();
  React.useEffect(function () {
    if (isUpdate) {
      setIdsList(getIds(count, prefix));
    }
  }, dependencies);
  return idsList;
}

exports.default = nextId;
exports.resetId = resetId;
exports.setPrefix = setPrefix;
exports.useId = useId;
